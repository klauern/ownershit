# https://taskfile.dev

version: "3"

tasks:
  dev:
    desc: set up development environment
    cmds:
      - go mod tidy
      - go install go.uber.org/mock/mockgen
      - go install golang.org/x/vuln/cmd/govulncheck@latest
      - go install github.com/klauern/bump/cmd/bump@latest

  build:
    desc: Build locally
    cmds:
      - go build ./cmd/ownershit/main.go
      - go build ./cmd/genqlient
      - rm main genqlient

  install:
    desc: install binary locally
    cmds:
      - go install ./cmd/ownershit

  format:
    aliases: [fmt]
    desc: format
    cmds:
      - go fmt
      - gofmt -w -s .

  lint:
    desc: run GolangCI-Lint
    cmds:
      - golangci-lint run

  mocks:
    desc: generate the mocks for use with testing and stubbing
    cmds:
      - go generate ./...

  test-query:
    desc: run a raw query with my name
    cmds:
      - go run ./cmd/ownershit/main.go archive query --username klauern
  test:
    desc: run tests
    deps:
      - mocks
    cmds:
      - go test -race -coverprofile=coverage.out ./...

  test-all:
    desc: run tests with security checks
    deps:
      - mocks
    cmds:
      - go test -race -coverprofile=coverage.out ./...
      - task: security
  test-cover:
    desc: run tests, and then show coverage output
    cmds:
      - task: test
      - cmd: go tool cover -html=coverage.out

  gql:download-schema:
    desc: download GitHub's GraphQL schema
    cmds:
      - cmd: curl -o schema.graphql https://docs.github.com/public/fpt/schema.docs.graphql

  gql:generate-client:
    desc: create GraphQL generated client for GitHub v4
    cmds:
      - cmd: go run github.com/Khan/genqlient

  security:
    desc: run security vulnerability check
    cmds:
      - govulncheck ./...

  release:patch:
    desc: create a patch release (bug fixes, v0.6.0 → v0.6.1)
    cmds:
      - task: test-all
      - task: security
      - cmd: |
          echo "🐛 Creating patch release..."
          bump patch --push
          echo "✅ Patch release created! GoReleaser will build and publish automatically."

  release:minor:
    desc: create a minor release (new features, v0.6.0 → v0.7.0)
    cmds:
      - task: test-all
      - task: security
      - cmd: |
          echo "✨ Creating minor release..."
          bump minor --push
          echo "✅ Minor release created! GoReleaser will build and publish automatically."

  release:major:
    desc: create a major release (breaking changes, v0.6.0 → v1.0.0)
    cmds:
      - task: test-all
      - task: security
      - cmd: |
          echo "💥 Creating major release..."
          bump major --push
          echo "✅ Major release created! GoReleaser will build and publish automatically."

  release:rc:
    desc: create a release candidate (v0.6.0 → v0.7.0-rc1)
    cmds:
      - task: test-all
      - task: security
      - cmd: |
          echo "🚀 Creating release candidate..."
          bump minor --suffix rc1 --push
          echo "✅ Release candidate created! GoReleaser will build and publish automatically."

  release:
    desc: show available release commands
    cmds:
      - cmd: |
          echo "📦 Available release commands:"
          echo ""
          echo "  task release:patch  - Bug fixes (v0.6.0 → v0.6.1)"
          echo "  task release:minor  - New features (v0.6.0 → v0.7.0)"
          echo "  task release:major  - Breaking changes (v0.6.0 → v1.0.0)"
          echo "  task release:rc     - Release candidate (v0.6.0 → v0.7.0-rc1)"
          echo ""
          echo "All releases automatically run tests, security checks, and push tags."
          echo "GoReleaser will build and publish binaries automatically."
