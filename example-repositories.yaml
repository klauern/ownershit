# ownershit Configuration Example
# GitHub repository management tool configuration

# Organization name (REQUIRED)
organization: my-awesome-org

# Branch protection rules applied to all repositories
branches:
  # Pull request requirements
  require_pull_request_reviews: true
  require_approving_count: 2
  require_code_owners: true

  # Merge strategy controls - enforce consistent merge practices
  allow_merge_commit: false    # Disable merge commits for cleaner history
  allow_squash_merge: true     # Allow squash merging
  allow_rebase_merge: true     # Allow rebase merging

  # Status checks - ensure CI/CD passes before merging
  require_status_checks: true
  status_checks:
    - "ci/build"
    - "ci/test"
    - "ci/lint"
    - "security/scan"
    - "codecov/patch"
  require_up_to_date_branch: true

  # Advanced protection settings
  enforce_admins: true                     # Apply protection rules to administrators
  restrict_pushes: true                    # Restrict who can push to protected branches
  push_allowlist:                          # Teams/users allowed to push to protected branches
    - "release-team"
    - "admin-team"
  require_conversation_resolution: true    # Require all PR conversations to be resolved
  require_linear_history: true             # Require linear commit history
  allow_force_pushes: false                # Disable force pushes
  allow_deletions: false                   # Disable branch deletions

# Team permissions (levels: pull, push, admin)
team:
  - name: developers
    level: push                            # Can push code and create PRs
  - name: senior-developers
    level: push
  - name: maintainers
    level: admin                           # Full repository access
  - name: security-team
    level: admin                           # Security team needs admin access
  - name: contractors
    level: pull                            # Read-only access for external contractors
  - name: qa-team
    level: push                            # QA team can push test branches
  - name: devops-team
    level: admin                           # DevOps needs admin for CI/CD setup

# Repository configurations (wiki, issues, projects)
repositories:
  # Main application repository
  - name: web-application
    wiki: true                             # Enable wiki for documentation
    issues: true                           # Enable GitHub issues for bug tracking
    projects: true                         # Enable GitHub projects for project management
    delete_branch_on_merge: true           # Automatically delete head branches after merge
    discussions_enabled: true              # Enable GitHub discussions for community Q&A
    sponsorships_enabled: false            # Disable sponsorship button

  # API service repository
  - name: user-api-service
    wiki: true                             # API documentation in wiki
    issues: true                           # Bug tracking enabled
    projects: false                        # No project management needed
    delete_branch_on_merge: true           # Clean up branches automatically
    discussions_enabled: false             # API discussions handled elsewhere
    sponsorships_enabled: false            # Internal service, no sponsorships

  # Mobile applications
  - name: mobile-app-ios
    wiki: false                            # Documentation elsewhere
    issues: true                           # Bug tracking for mobile issues
    projects: true                         # Sprint planning with projects

  - name: mobile-app-android
    wiki: false                            # Shared docs with iOS
    issues: true                           # Separate Android issue tracking
    projects: true                         # Android-specific project board

  # Infrastructure & DevOps
  - name: terraform-infrastructure
    wiki: true                             # Infrastructure documentation
    issues: true                           # Infrastructure issues/requests
    projects: false                        # No projects needed for IaC

  - name: internal-cli-tools
    wiki: false                            # Simple tools, no wiki needed
    issues: true                           # Bug reports for internal tools
    projects: false                        # No project management

  # Documentation & Legacy
  - name: company-docs
    wiki: false                            # Content is the repository itself
    issues: true                           # Documentation improvement requests
    projects: true                         # Editorial calendar in projects
    delete_branch_on_merge: true           # Keep repository clean
    discussions_enabled: true              # Enable community discussions about docs
    sponsorships_enabled: true             # Allow sponsorship for open-source docs

  - name: legacy-java-app
    wiki: false                            # Deprecated, no new docs
    issues: true                           # Still need bug tracking
    projects: false                        # No active development

# Default labels applied to all repositories
default_labels:
  # Bug tracking
  - name: "bug"
    color: "d73a4a"
    emoji: "üêõ"
    description: "Something isn't working"

  - name: "critical-bug"
    color: "b60205"
    emoji: "üö®"
    description: "Critical issue requiring immediate attention"

  # Features
  - name: "enhancement"
    color: "a2eeef"
    emoji: "‚ú®"
    description: "New feature or request"

  - name: "feature-request"
    color: "84b6eb"
    emoji: "üí°"
    description: "User-requested new functionality"

  # Workflow
  - name: "good first issue"
    color: "7057ff"
    emoji: "üëã"
    description: "Good for newcomers"

  - name: "help wanted"
    color: "008672"
    emoji: "üôã"
    description: "Extra attention is needed"

  - name: "wontfix"
    color: "ffffff"
    emoji: "üö´"
    description: "This will not be worked on"

  # Documentation
  - name: "documentation"
    color: "0075ca"
    emoji: "üìö"
    description: "Improvements or additions to documentation"

  - name: "docs-needed"
    color: "1d76db"
    emoji: "üìù"
    description: "Requires documentation updates"

  # Security
  - name: "security"
    color: "ff6b6b"
    emoji: "üîí"
    description: "Security-related issue"

  - name: "vulnerability"
    color: "d93f0b"
    emoji: "‚ö†Ô∏è"
    description: "Security vulnerability"

  # Priority
  - name: "priority: high"
    color: "ff9500"
    emoji: "üî•"
    description: "High priority issue"

  - name: "priority: medium"
    color: "ffcc00"
    emoji: "üìã"
    description: "Medium priority issue"

  - name: "priority: low"
    color: "bfdadc"
    emoji: "üìù"
    description: "Low priority issue"

  # Components
  - name: "frontend"
    color: "f9d71c"
    emoji: "üé®"
    description: "Frontend/UI related"

  - name: "backend"
    color: "c2e0c6"
    emoji: "‚öôÔ∏è"
    description: "Backend/API related"

  - name: "database"
    color: "8b4513"
    emoji: "üóÑÔ∏è"
    description: "Database related"

  - name: "infrastructure"
    color: "5319e7"
    emoji: "üèóÔ∏è"
    description: "Infrastructure/DevOps related"

  # Special workflow
  - name: "duplicate"
    color: "cfd3d7"
    emoji: "üë•"
    description: "This issue or pull request already exists"

  - name: "invalid"
    color: "e4e669"
    emoji: "‚ùå"
    description: "This doesn't seem right"

  - name: "question"
    color: "d876e3"
    emoji: "‚ùì"
    description: "Further information is requested"

  - name: "dependencies"
    color: "0366d6"
    emoji: "üì¶"
    description: "Dependency updates"

# Usage Instructions
# Getting Started:
#   1. Update the 'organization' field with your GitHub organization name
#   2. Modify team names and permissions to match your organization structure
#   3. Add/remove repositories as needed with appropriate feature settings
#   4. Configure advanced repository features:
#      - delete_branch_on_merge: Automatically clean up PR branches after merge
#      - discussions_enabled: Enable GitHub discussions for community engagement
#      - sponsorships_enabled: Show sponsorship button for funding
#   5. Customize labels to match your workflow and terminology
#   6. Adjust branch protection rules based on your security requirements
#
# To apply this configuration:
#   1. Set your GitHub token: export GITHUB_TOKEN=your_token_here
#   2. Run: ownershit sync --config example-repositories.yaml
#
# Available Commands:
#   - ownershit sync       # Apply all settings
#   - ownershit branches   # Update only branch protection rules
#   - ownershit label      # Sync only labels
#   - ownershit ratelimit  # Check API rate limits
