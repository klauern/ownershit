// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v4api

import (
	"context"
	"net/url"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Autogenerated input type of CreateLabel
type CreateLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// A 6 character hex code, without the leading #, identifying the color of the label.
	Color string `json:"color"`
	// A brief description of the label, such as its purpose.
	Description string `json:"description"`
	// The name of the label.
	Name string `json:"name"`
	// The Node ID of the repository.
	RepositoryId string `json:"repositoryId"`
}

// GetClientMutationId returns CreateLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetColor returns CreateLabelInput.Color, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetColor() string { return v.Color }

// GetDescription returns CreateLabelInput.Description, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetDescription() string { return v.Description }

// GetName returns CreateLabelInput.Name, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetName() string { return v.Name }

// GetRepositoryId returns CreateLabelInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetRepositoryId() string { return v.RepositoryId }

// Autogenerated input type of DeleteLabel
type DeleteLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// The Node ID of the label to be deleted.
	Id string `json:"id"`
}

// GetClientMutationId returns DeleteLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *DeleteLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns DeleteLabelInput.Id, and is useful for accessing the field via an interface.
func (v *DeleteLabelInput) GetId() string { return v.Id }

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Ways in which team connections can be ordered.
type TeamOrder struct {
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
	// The field in which to order nodes by.
	Field TeamOrderField `json:"field"`
}

// GetDirection returns TeamOrder.Direction, and is useful for accessing the field via an interface.
func (v *TeamOrder) GetDirection() OrderDirection { return v.Direction }

// GetField returns TeamOrder.Field, and is useful for accessing the field via an interface.
func (v *TeamOrder) GetField() TeamOrderField { return v.Field }

// Properties by which team connections can be ordered.
type TeamOrderField string

const (
	// Allows ordering a list of teams by name.
	TeamOrderFieldName TeamOrderField = "NAME"
)

// Autogenerated input type of UpdateLabel
type UpdateLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// A 6 character hex code, without the leading #, identifying the updated color of the label.
	Color string `json:"color"`
	// A brief description of the label, such as its purpose.
	Description string `json:"description"`
	// The Node ID of the label to be updated.
	Id string `json:"id"`
	// The updated name of the label.
	Name string `json:"name"`
}

// GetClientMutationId returns UpdateLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetColor returns UpdateLabelInput.Color, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetColor() string { return v.Color }

// GetDescription returns UpdateLabelInput.Description, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetDescription() string { return v.Description }

// GetId returns UpdateLabelInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetId() string { return v.Id }

// GetName returns UpdateLabelInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetName() string { return v.Name }

// __createLabelInput is used internally by genqlient
type __createLabelInput struct {
	Input CreateLabelInput `json:"input"`
}

// GetInput returns __createLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__createLabelInput) GetInput() CreateLabelInput { return v.Input }

// __deleteLabelInput is used internally by genqlient
type __deleteLabelInput struct {
	Input DeleteLabelInput `json:"input"`
}

// GetInput returns __deleteLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__deleteLabelInput) GetInput() DeleteLabelInput { return v.Input }

// __getTeamsInput is used internally by genqlient
type __getTeamsInput struct {
	Order  TeamOrder `json:"order"`
	First  int       `json:"first"`
	Cursor string    `json:"cursor,omitempty"`
}

// GetOrder returns __getTeamsInput.Order, and is useful for accessing the field via an interface.
func (v *__getTeamsInput) GetOrder() TeamOrder { return v.Order }

// GetFirst returns __getTeamsInput.First, and is useful for accessing the field via an interface.
func (v *__getTeamsInput) GetFirst() int { return v.First }

// GetCursor returns __getTeamsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__getTeamsInput) GetCursor() string { return v.Cursor }

// __repositoryIssueLabelsInput is used internally by genqlient
type __repositoryIssueLabelsInput struct {
	Name  string `json:"name"`
	Owner string `json:"owner"`
}

// GetName returns __repositoryIssueLabelsInput.Name, and is useful for accessing the field via an interface.
func (v *__repositoryIssueLabelsInput) GetName() string { return v.Name }

// GetOwner returns __repositoryIssueLabelsInput.Owner, and is useful for accessing the field via an interface.
func (v *__repositoryIssueLabelsInput) GetOwner() string { return v.Owner }

// __updateLabelInput is used internally by genqlient
type __updateLabelInput struct {
	Input UpdateLabelInput `json:"input"`
}

// GetInput returns __updateLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__updateLabelInput) GetInput() UpdateLabelInput { return v.Input }

// createLabelCreateLabelCreateLabelPayload includes the requested fields of the GraphQL type CreateLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreateLabel
type createLabelCreateLabelCreateLabelPayload struct {
	// The new label.
	Label createLabelCreateLabelCreateLabelPayloadLabel `json:"label"`
}

// GetLabel returns createLabelCreateLabelCreateLabelPayload.Label, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayload) GetLabel() createLabelCreateLabelCreateLabelPayloadLabel {
	return v.Label
}

// createLabelCreateLabelCreateLabelPayloadLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type createLabelCreateLabelCreateLabelPayloadLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
}

// GetName returns createLabelCreateLabelCreateLabelPayloadLabel.Name, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetName() string { return v.Name }

// GetCreatedAt returns createLabelCreateLabelCreateLabelPayloadLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetCreatedAt() time.Time { return v.CreatedAt }

// GetColor returns createLabelCreateLabelCreateLabelPayloadLabel.Color, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetColor() string { return v.Color }

// GetDescription returns createLabelCreateLabelCreateLabelPayloadLabel.Description, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetDescription() string { return v.Description }

// GetIsDefault returns createLabelCreateLabelCreateLabelPayloadLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetIsDefault() bool { return v.IsDefault }

// GetUpdatedAt returns createLabelCreateLabelCreateLabelPayloadLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns createLabelCreateLabelCreateLabelPayloadLabel.Url, and is useful for accessing the field via an interface.
func (v *createLabelCreateLabelCreateLabelPayloadLabel) GetUrl() url.URL { return v.Url }

// createLabelResponse is returned by createLabel on success.
type createLabelResponse struct {
	// Creates a new label.
	CreateLabel createLabelCreateLabelCreateLabelPayload `json:"createLabel"`
}

// GetCreateLabel returns createLabelResponse.CreateLabel, and is useful for accessing the field via an interface.
func (v *createLabelResponse) GetCreateLabel() createLabelCreateLabelCreateLabelPayload {
	return v.CreateLabel
}

// deleteLabelDeleteLabelDeleteLabelPayload includes the requested fields of the GraphQL type DeleteLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of DeleteLabel
type deleteLabelDeleteLabelDeleteLabelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns deleteLabelDeleteLabelDeleteLabelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *deleteLabelDeleteLabelDeleteLabelPayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// deleteLabelResponse is returned by deleteLabel on success.
type deleteLabelResponse struct {
	// Deletes a label.
	DeleteLabel deleteLabelDeleteLabelDeleteLabelPayload `json:"deleteLabel"`
}

// GetDeleteLabel returns deleteLabelResponse.DeleteLabel, and is useful for accessing the field via an interface.
func (v *deleteLabelResponse) GetDeleteLabel() deleteLabelDeleteLabelDeleteLabelPayload {
	return v.DeleteLabel
}

// getRateLimitRateLimit includes the requested fields of the GraphQL type RateLimit.
// The GraphQL type's documentation follows.
//
// Represents the client's rate limit.
type getRateLimitRateLimit struct {
	// The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int `json:"limit"`
	// The point cost for the current query counting against the rate limit.
	Cost int `json:"cost"`
	// The number of points remaining in the current rate limit window.
	Remaining int `json:"remaining"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt time.Time `json:"resetAt"`
}

// GetLimit returns getRateLimitRateLimit.Limit, and is useful for accessing the field via an interface.
func (v *getRateLimitRateLimit) GetLimit() int { return v.Limit }

// GetCost returns getRateLimitRateLimit.Cost, and is useful for accessing the field via an interface.
func (v *getRateLimitRateLimit) GetCost() int { return v.Cost }

// GetRemaining returns getRateLimitRateLimit.Remaining, and is useful for accessing the field via an interface.
func (v *getRateLimitRateLimit) GetRemaining() int { return v.Remaining }

// GetResetAt returns getRateLimitRateLimit.ResetAt, and is useful for accessing the field via an interface.
func (v *getRateLimitRateLimit) GetResetAt() time.Time { return v.ResetAt }

// getRateLimitResponse is returned by getRateLimit on success.
type getRateLimitResponse struct {
	// The currently authenticated user.
	Viewer getRateLimitViewerUser `json:"viewer"`
	// The client's rate limit information.
	RateLimit getRateLimitRateLimit `json:"rateLimit"`
}

// GetViewer returns getRateLimitResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getRateLimitResponse) GetViewer() getRateLimitViewerUser { return v.Viewer }

// GetRateLimit returns getRateLimitResponse.RateLimit, and is useful for accessing the field via an interface.
func (v *getRateLimitResponse) GetRateLimit() getRateLimitRateLimit { return v.RateLimit }

// getRateLimitViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getRateLimitViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns getRateLimitViewerUser.Login, and is useful for accessing the field via an interface.
func (v *getRateLimitViewerUser) GetLogin() string { return v.Login }

// getTeamsOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getTeamsOrganization struct {
	// A list of teams in this organization.
	Teams getTeamsOrganizationTeamsTeamConnection `json:"teams"`
}

// GetTeams returns getTeamsOrganization.Teams, and is useful for accessing the field via an interface.
func (v *getTeamsOrganization) GetTeams() getTeamsOrganizationTeamsTeamConnection { return v.Teams }

// getTeamsOrganizationTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type getTeamsOrganizationTeamsTeamConnection struct {
	// Information to aid in pagination.
	PageInfo getTeamsOrganizationTeamsTeamConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// GetPageInfo returns getTeamsOrganizationTeamsTeamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnection) GetPageInfo() getTeamsOrganizationTeamsTeamConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns getTeamsOrganizationTeamsTeamConnection.Edges, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnection) GetEdges() []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge {
	return v.Edges
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// GetNode returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge.Node, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge) GetNode() getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam {
	return v.Node
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	// The name of the team.
	Name string `json:"name"`
	// A list of users who are members of this team.
	Members getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection `json:"members"`
	// List of child teams belonging to this team
	ChildTeams getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection `json:"childTeams"`
	// The description of the team.
	Description string `json:"description"`
}

// GetName returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Name, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetName() string {
	return v.Name
}

// GetMembers returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Members, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetMembers() getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection {
	return v.Members
}

// GetChildTeams returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.ChildTeams, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetChildTeams() getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection {
	return v.ChildTeams
}

// GetDescription returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Description, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetDescription() string {
	return v.Description
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection struct {
	// A list of edges.
	Edges []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// GetEdges returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection.Edges, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection) GetEdges() []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge {
	return v.Edges
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// GetNode returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge.Node, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge) GetNode() getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam {
	return v.Node
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	Id string `json:"id"`
}

// GetId returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Id, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetId() string {
	return v.Id
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
// The GraphQL type's documentation follows.
//
// The connection type for User.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection struct {
	// A list of edges.
	Edges []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge `json:"edges"`
}

// GetEdges returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection.Edges, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection) GetEdges() []getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge {
	return v.Edges
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge includes the requested fields of the GraphQL type TeamMemberEdge.
// The GraphQL type's documentation follows.
//
// Represents a user who is a member of a team.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge struct {
	Node getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser `json:"node"`
}

// GetNode returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge.Node, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge) GetNode() getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser {
	return v.Node
}

// getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser struct {
	Id string `json:"id"`
}

// GetId returns getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser.Id, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser) GetId() string {
	return v.Id
}

// getTeamsOrganizationTeamsTeamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getTeamsOrganizationTeamsTeamConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns getTeamsOrganizationTeamsTeamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetStartCursor returns getTeamsOrganizationTeamsTeamConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns getTeamsOrganizationTeamsTeamConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getTeamsOrganizationTeamsTeamConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// getTeamsRateLimit includes the requested fields of the GraphQL type RateLimit.
// The GraphQL type's documentation follows.
//
// Represents the client's rate limit.
type getTeamsRateLimit struct {
	// The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int `json:"limit"`
	// The point cost for the current query counting against the rate limit.
	Cost int `json:"cost"`
	// The number of points remaining in the current rate limit window.
	Remaining int `json:"remaining"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt time.Time `json:"resetAt"`
}

// GetLimit returns getTeamsRateLimit.Limit, and is useful for accessing the field via an interface.
func (v *getTeamsRateLimit) GetLimit() int { return v.Limit }

// GetCost returns getTeamsRateLimit.Cost, and is useful for accessing the field via an interface.
func (v *getTeamsRateLimit) GetCost() int { return v.Cost }

// GetRemaining returns getTeamsRateLimit.Remaining, and is useful for accessing the field via an interface.
func (v *getTeamsRateLimit) GetRemaining() int { return v.Remaining }

// GetResetAt returns getTeamsRateLimit.ResetAt, and is useful for accessing the field via an interface.
func (v *getTeamsRateLimit) GetResetAt() time.Time { return v.ResetAt }

// getTeamsResponse is returned by getTeams on success.
type getTeamsResponse struct {
	// Lookup a organization by login.
	Organization getTeamsOrganization `json:"organization"`
	// The currently authenticated user.
	Viewer getTeamsViewerUser `json:"viewer"`
	// The client's rate limit information.
	RateLimit getTeamsRateLimit `json:"rateLimit"`
}

// GetOrganization returns getTeamsResponse.Organization, and is useful for accessing the field via an interface.
func (v *getTeamsResponse) GetOrganization() getTeamsOrganization { return v.Organization }

// GetViewer returns getTeamsResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getTeamsResponse) GetViewer() getTeamsViewerUser { return v.Viewer }

// GetRateLimit returns getTeamsResponse.RateLimit, and is useful for accessing the field via an interface.
func (v *getTeamsResponse) GetRateLimit() getTeamsRateLimit { return v.RateLimit }

// getTeamsViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getTeamsViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns getTeamsViewerUser.Login, and is useful for accessing the field via an interface.
func (v *getTeamsViewerUser) GetLogin() string { return v.Login }

// repositoryIssueLabelsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type repositoryIssueLabelsRepository struct {
	// A list of labels associated with the repository.
	Labels repositoryIssueLabelsRepositoryLabelsLabelConnection `json:"labels"`
}

// GetLabels returns repositoryIssueLabelsRepository.Labels, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepository) GetLabels() repositoryIssueLabelsRepositoryLabelsLabelConnection {
	return v.Labels
}

// repositoryIssueLabelsRepositoryLabelsLabelConnection includes the requested fields of the GraphQL type LabelConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Label.
type repositoryIssueLabelsRepositoryLabelsLabelConnection struct {
	// A list of edges.
	Edges []repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo `json:"pageInfo"`
}

// GetEdges returns repositoryIssueLabelsRepositoryLabelsLabelConnection.Edges, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnection) GetEdges() []repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge {
	return v.Edges
}

// GetPageInfo returns repositoryIssueLabelsRepositoryLabelsLabelConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnection) GetPageInfo() repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo {
	return v.PageInfo
}

// repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge includes the requested fields of the GraphQL type LabelEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge struct {
	// The item at the end of the edge.
	Node repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel `json:"node"`
}

// GetNode returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge.Node, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge) GetNode() repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel {
	return v.Node
}

// repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
}

// GetName returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Name, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetName() string {
	return v.Name
}

// GetCreatedAt returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetColor returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Color, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetColor() string {
	return v.Color
}

// GetDescription returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Description, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetDescription() string {
	return v.Description
}

// GetIsDefault returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetIsDefault() bool {
	return v.IsDefault
}

// GetUpdatedAt returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetUrl returns repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Url, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetUrl() url.URL {
	return v.Url
}

// repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStartCursor returns repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetHasNextPage returns repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// repositoryIssueLabelsResponse is returned by repositoryIssueLabels on success.
type repositoryIssueLabelsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository repositoryIssueLabelsRepository `json:"repository"`
}

// GetRepository returns repositoryIssueLabelsResponse.Repository, and is useful for accessing the field via an interface.
func (v *repositoryIssueLabelsResponse) GetRepository() repositoryIssueLabelsRepository {
	return v.Repository
}

// updateLabelResponse is returned by updateLabel on success.
type updateLabelResponse struct {
	// Updates an existing label.
	UpdateLabel updateLabelUpdateLabelUpdateLabelPayload `json:"updateLabel"`
}

// GetUpdateLabel returns updateLabelResponse.UpdateLabel, and is useful for accessing the field via an interface.
func (v *updateLabelResponse) GetUpdateLabel() updateLabelUpdateLabelUpdateLabelPayload {
	return v.UpdateLabel
}

// updateLabelUpdateLabelUpdateLabelPayload includes the requested fields of the GraphQL type UpdateLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of UpdateLabel
type updateLabelUpdateLabelUpdateLabelPayload struct {
	// The updated label.
	Label updateLabelUpdateLabelUpdateLabelPayloadLabel `json:"label"`
}

// GetLabel returns updateLabelUpdateLabelUpdateLabelPayload.Label, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayload) GetLabel() updateLabelUpdateLabelUpdateLabelPayloadLabel {
	return v.Label
}

// updateLabelUpdateLabelUpdateLabelPayloadLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type updateLabelUpdateLabelUpdateLabelPayloadLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
}

// GetName returns updateLabelUpdateLabelUpdateLabelPayloadLabel.Name, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetName() string { return v.Name }

// GetCreatedAt returns updateLabelUpdateLabelUpdateLabelPayloadLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetCreatedAt() time.Time { return v.CreatedAt }

// GetColor returns updateLabelUpdateLabelUpdateLabelPayloadLabel.Color, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetColor() string { return v.Color }

// GetDescription returns updateLabelUpdateLabelUpdateLabelPayloadLabel.Description, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetDescription() string { return v.Description }

// GetIsDefault returns updateLabelUpdateLabelUpdateLabelPayloadLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetIsDefault() bool { return v.IsDefault }

// GetUpdatedAt returns updateLabelUpdateLabelUpdateLabelPayloadLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns updateLabelUpdateLabelUpdateLabelPayloadLabel.Url, and is useful for accessing the field via an interface.
func (v *updateLabelUpdateLabelUpdateLabelPayloadLabel) GetUrl() url.URL { return v.Url }

func createLabel(
	ctx context.Context,
	client graphql.Client,
	input CreateLabelInput,
) (*createLabelResponse, error) {
	__input := __createLabelInput{
		Input: input,
	}
	var err error

	var retval createLabelResponse
	err = client.MakeRequest(
		ctx,
		"createLabel",
		`
mutation createLabel ($input: CreateLabelInput!) {
	createLabel(input: $input) {
		label {
			name
			createdAt
			color
			description
			isDefault
			updatedAt
			url
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func deleteLabel(
	ctx context.Context,
	client graphql.Client,
	input DeleteLabelInput,
) (*deleteLabelResponse, error) {
	__input := __deleteLabelInput{
		Input: input,
	}
	var err error

	var retval deleteLabelResponse
	err = client.MakeRequest(
		ctx,
		"deleteLabel",
		`
mutation deleteLabel ($input: DeleteLabelInput!) {
	deleteLabel(input: $input) {
		clientMutationId
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func getRateLimit(
	ctx context.Context,
	client graphql.Client,
) (*getRateLimitResponse, error) {
	var err error

	var retval getRateLimitResponse
	err = client.MakeRequest(
		ctx,
		"getRateLimit",
		`
query getRateLimit {
	viewer {
		login
	}
	rateLimit {
		limit
		cost
		remaining
		resetAt
	}
}
`,
		&retval,
		nil,
	)
	return &retval, err
}

func getTeams(
	ctx context.Context,
	client graphql.Client,
	order TeamOrder,
	first int,
	cursor string,
) (*getTeamsResponse, error) {
	__input := __getTeamsInput{
		Order:  order,
		First:  first,
		Cursor: cursor,
	}
	var err error

	var retval getTeamsResponse
	err = client.MakeRequest(
		ctx,
		"getTeams",
		`
query getTeams ($order: TeamOrder!, $first: Int, $cursor: String) {
	organization(login: "zendesk") {
		teams(orderBy: $order, first: $first, after: $cursor) {
			pageInfo {
				hasNextPage
				startCursor
				endCursor
			}
			edges {
				node {
					name
					members {
						edges {
							node {
								id
							}
						}
					}
					childTeams(first: 100) {
						edges {
							node {
								id
							}
						}
					}
					description
				}
			}
		}
	}
	viewer {
		login
	}
	rateLimit {
		limit
		cost
		remaining
		resetAt
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func repositoryIssueLabels(
	ctx context.Context,
	client graphql.Client,
	name string,
	owner string,
) (*repositoryIssueLabelsResponse, error) {
	__input := __repositoryIssueLabelsInput{
		Name:  name,
		Owner: owner,
	}
	var err error

	var retval repositoryIssueLabelsResponse
	err = client.MakeRequest(
		ctx,
		"repositoryIssueLabels",
		`
query repositoryIssueLabels ($name: String = "", $owner: String = "zendesk") {
	repository(name: $name, owner: $owner) {
		labels(first: 100) {
			edges {
				node {
					name
					createdAt
					color
					description
					isDefault
					updatedAt
					url
				}
			}
			pageInfo {
				endCursor
				startCursor
				hasNextPage
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}

func updateLabel(
	ctx context.Context,
	client graphql.Client,
	input UpdateLabelInput,
) (*updateLabelResponse, error) {
	__input := __updateLabelInput{
		Input: input,
	}
	var err error

	var retval updateLabelResponse
	err = client.MakeRequest(
		ctx,
		"updateLabel",
		`
mutation updateLabel ($input: UpdateLabelInput!) {
	updateLabel(input: $input) {
		label {
			name
			createdAt
			color
			description
			isDefault
			updatedAt
			url
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
