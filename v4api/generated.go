// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v4api

import (
	"context"
	"net/url"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateLabelCreateLabelCreateLabelPayload includes the requested fields of the GraphQL type CreateLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreateLabel.
type CreateLabelCreateLabelCreateLabelPayload struct {
	// The new label.
	Label CreateLabelCreateLabelCreateLabelPayloadLabel `json:"label"`
}

// GetLabel returns CreateLabelCreateLabelCreateLabelPayload.Label, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayload) GetLabel() CreateLabelCreateLabelCreateLabelPayloadLabel {
	return v.Label
}

// CreateLabelCreateLabelCreateLabelPayloadLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type CreateLabelCreateLabelCreateLabelPayloadLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
}

// GetName returns CreateLabelCreateLabelCreateLabelPayloadLabel.Name, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetName() string { return v.Name }

// GetCreatedAt returns CreateLabelCreateLabelCreateLabelPayloadLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetCreatedAt() time.Time { return v.CreatedAt }

// GetColor returns CreateLabelCreateLabelCreateLabelPayloadLabel.Color, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetColor() string { return v.Color }

// GetDescription returns CreateLabelCreateLabelCreateLabelPayloadLabel.Description, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetDescription() string { return v.Description }

// GetIsDefault returns CreateLabelCreateLabelCreateLabelPayloadLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetIsDefault() bool { return v.IsDefault }

// GetUpdatedAt returns CreateLabelCreateLabelCreateLabelPayloadLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns CreateLabelCreateLabelCreateLabelPayloadLabel.Url, and is useful for accessing the field via an interface.
func (v *CreateLabelCreateLabelCreateLabelPayloadLabel) GetUrl() url.URL { return v.Url }

// Autogenerated input type of CreateLabel
type CreateLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// A 6 character hex code, without the leading #, identifying the color of the label.
	Color string `json:"color"`
	// A brief description of the label, such as its purpose.
	Description string `json:"description"`
	// The name of the label.
	Name string `json:"name"`
	// The Node ID of the repository.
	RepositoryId string `json:"repositoryId"`
}

// GetClientMutationId returns CreateLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetColor returns CreateLabelInput.Color, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetColor() string { return v.Color }

// GetDescription returns CreateLabelInput.Description, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetDescription() string { return v.Description }

// GetName returns CreateLabelInput.Name, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetName() string { return v.Name }

// GetRepositoryId returns CreateLabelInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *CreateLabelInput) GetRepositoryId() string { return v.RepositoryId }

// CreateLabelResponse is returned by CreateLabel on success.
type CreateLabelResponse struct {
	// Creates a new label.
	CreateLabel CreateLabelCreateLabelCreateLabelPayload `json:"createLabel"`
}

// GetCreateLabel returns CreateLabelResponse.CreateLabel, and is useful for accessing the field via an interface.
func (v *CreateLabelResponse) GetCreateLabel() CreateLabelCreateLabelCreateLabelPayload {
	return v.CreateLabel
}

// DeleteLabelDeleteLabelDeleteLabelPayload includes the requested fields of the GraphQL type DeleteLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of DeleteLabel.
type DeleteLabelDeleteLabelDeleteLabelPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
}

// GetClientMutationId returns DeleteLabelDeleteLabelDeleteLabelPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *DeleteLabelDeleteLabelDeleteLabelPayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// Autogenerated input type of DeleteLabel
type DeleteLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// The Node ID of the label to be deleted.
	Id string `json:"id"`
}

// GetClientMutationId returns DeleteLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *DeleteLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetId returns DeleteLabelInput.Id, and is useful for accessing the field via an interface.
func (v *DeleteLabelInput) GetId() string { return v.Id }

// DeleteLabelResponse is returned by DeleteLabel on success.
type DeleteLabelResponse struct {
	// Deletes a label.
	DeleteLabel DeleteLabelDeleteLabelDeleteLabelPayload `json:"deleteLabel"`
}

// GetDeleteLabel returns DeleteLabelResponse.DeleteLabel, and is useful for accessing the field via an interface.
func (v *DeleteLabelResponse) GetDeleteLabel() DeleteLabelDeleteLabelDeleteLabelPayload {
	return v.DeleteLabel
}

// GetRateLimitRateLimit includes the requested fields of the GraphQL type RateLimit.
// The GraphQL type's documentation follows.
//
// Represents the client's rate limit.
type GetRateLimitRateLimit struct {
	// The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int `json:"limit"`
	// The point cost for the current query counting against the rate limit.
	Cost int `json:"cost"`
	// The number of points remaining in the current rate limit window.
	Remaining int `json:"remaining"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt time.Time `json:"resetAt"`
}

// GetLimit returns GetRateLimitRateLimit.Limit, and is useful for accessing the field via an interface.
func (v *GetRateLimitRateLimit) GetLimit() int { return v.Limit }

// GetCost returns GetRateLimitRateLimit.Cost, and is useful for accessing the field via an interface.
func (v *GetRateLimitRateLimit) GetCost() int { return v.Cost }

// GetRemaining returns GetRateLimitRateLimit.Remaining, and is useful for accessing the field via an interface.
func (v *GetRateLimitRateLimit) GetRemaining() int { return v.Remaining }

// GetResetAt returns GetRateLimitRateLimit.ResetAt, and is useful for accessing the field via an interface.
func (v *GetRateLimitRateLimit) GetResetAt() time.Time { return v.ResetAt }

// GetRateLimitResponse is returned by GetRateLimit on success.
type GetRateLimitResponse struct {
	// The currently authenticated user.
	Viewer GetRateLimitViewerUser `json:"viewer"`
	// The client's rate limit information.
	RateLimit GetRateLimitRateLimit `json:"rateLimit"`
}

// GetViewer returns GetRateLimitResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetRateLimitResponse) GetViewer() GetRateLimitViewerUser { return v.Viewer }

// GetRateLimit returns GetRateLimitResponse.RateLimit, and is useful for accessing the field via an interface.
func (v *GetRateLimitResponse) GetRateLimit() GetRateLimitRateLimit { return v.RateLimit }

// GetRateLimitViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetRateLimitViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns GetRateLimitViewerUser.Login, and is useful for accessing the field via an interface.
func (v *GetRateLimitViewerUser) GetLogin() string { return v.Login }

// GetRepositoryIssueLabelsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type GetRepositoryIssueLabelsRepository struct {
	// The Node ID of the Repository object
	Id string `json:"id"`
	// A list of labels associated with the repository.
	Labels GetRepositoryIssueLabelsRepositoryLabelsLabelConnection `json:"labels"`
}

// GetId returns GetRepositoryIssueLabelsRepository.Id, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepository) GetId() string { return v.Id }

// GetLabels returns GetRepositoryIssueLabelsRepository.Labels, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepository) GetLabels() GetRepositoryIssueLabelsRepositoryLabelsLabelConnection {
	return v.Labels
}

// GetRepositoryIssueLabelsRepositoryLabelsLabelConnection includes the requested fields of the GraphQL type LabelConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Label.
type GetRepositoryIssueLabelsRepositoryLabelsLabelConnection struct {
	// A list of edges.
	Edges []GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo `json:"pageInfo"`
}

// GetEdges returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnection) GetEdges() []GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge {
	return v.Edges
}

// GetPageInfo returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnection) GetPageInfo() GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo {
	return v.PageInfo
}

// GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge includes the requested fields of the GraphQL type LabelEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge struct {
	// The item at the end of the edge.
	Node GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel `json:"node"`
}

// GetNode returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge.Node, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdge) GetNode() GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel {
	return v.Node
}

// GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
	// The Node ID of the Label object
	Id string `json:"id"`
}

// GetName returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetName() string {
	return v.Name
}

// GetCreatedAt returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetColor returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Color, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetColor() string {
	return v.Color
}

// GetDescription returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Description, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetDescription() string {
	return v.Description
}

// GetIsDefault returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetIsDefault() bool {
	return v.IsDefault
}

// GetUpdatedAt returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetUrl returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Url, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetUrl() url.URL {
	return v.Url
}

// GetId returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel.Id, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionEdgesLabelEdgeNodeLabel) GetId() string {
	return v.Id
}

// GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
}

// GetEndCursor returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStartCursor returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetHasNextPage returns GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsRepositoryLabelsLabelConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetRepositoryIssueLabelsResponse is returned by GetRepositoryIssueLabels on success.
type GetRepositoryIssueLabelsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository GetRepositoryIssueLabelsRepository `json:"repository"`
}

// GetRepository returns GetRepositoryIssueLabelsResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetRepositoryIssueLabelsResponse) GetRepository() GetRepositoryIssueLabelsRepository {
	return v.Repository
}

// GetTeamsOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type GetTeamsOrganization struct {
	// A list of teams in this organization.
	Teams GetTeamsOrganizationTeamsTeamConnection `json:"teams"`
}

// GetTeams returns GetTeamsOrganization.Teams, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganization) GetTeams() GetTeamsOrganizationTeamsTeamConnection { return v.Teams }

// GetTeamsOrganizationTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type GetTeamsOrganizationTeamsTeamConnection struct {
	// Information to aid in pagination.
	PageInfo GetTeamsOrganizationTeamsTeamConnectionPageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// GetPageInfo returns GetTeamsOrganizationTeamsTeamConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnection) GetPageInfo() GetTeamsOrganizationTeamsTeamConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns GetTeamsOrganizationTeamsTeamConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnection) GetEdges() []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge {
	return v.Edges
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// GetNode returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge.Node, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdge) GetNode() GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam {
	return v.Node
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	// The name of the team.
	Name string `json:"name"`
	// A list of users who are members of this team.
	Members GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection `json:"members"`
	// List of child teams belonging to this team
	ChildTeams GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection `json:"childTeams"`
	// The description of the team.
	Description string `json:"description"`
}

// GetName returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Name, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetName() string {
	return v.Name
}

// GetMembers returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Members, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetMembers() GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection {
	return v.Members
}

// GetChildTeams returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.ChildTeams, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetChildTeams() GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection {
	return v.ChildTeams
}

// GetDescription returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Description, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetDescription() string {
	return v.Description
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection includes the requested fields of the GraphQL type TeamConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Team.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection struct {
	// A list of edges.
	Edges []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge `json:"edges"`
}

// GetEdges returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnection) GetEdges() []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge {
	return v.Edges
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge includes the requested fields of the GraphQL type TeamEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge struct {
	// The item at the end of the edge.
	Node GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam `json:"node"`
}

// GetNode returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge.Node, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdge) GetNode() GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam {
	return v.Node
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam struct {
	// The Node ID of the Team object
	Id string `json:"id"`
}

// GetId returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam.Id, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamChildTeamsTeamConnectionEdgesTeamEdgeNodeTeam) GetId() string {
	return v.Id
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection includes the requested fields of the GraphQL type TeamMemberConnection.
// The GraphQL type's documentation follows.
//
// The connection type for User.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection struct {
	// A list of edges.
	Edges []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge `json:"edges"`
}

// GetEdges returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnection) GetEdges() []GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge {
	return v.Edges
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge includes the requested fields of the GraphQL type TeamMemberEdge.
// The GraphQL type's documentation follows.
//
// Represents a user who is a member of a team.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge struct {
	Node GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser `json:"node"`
}

// GetNode returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge.Node, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdge) GetNode() GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser {
	return v.Node
}

// GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser struct {
	// The Node ID of the User object
	Id string `json:"id"`
}

// GetId returns GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser.Id, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionEdgesTeamEdgeNodeTeamMembersTeamMemberConnectionEdgesTeamMemberEdgeNodeUser) GetId() string {
	return v.Id
}

// GetTeamsOrganizationTeamsTeamConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type GetTeamsOrganizationTeamsTeamConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetTeamsOrganizationTeamsTeamConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetStartCursor returns GetTeamsOrganizationTeamsTeamConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns GetTeamsOrganizationTeamsTeamConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetTeamsOrganizationTeamsTeamConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetTeamsRateLimit includes the requested fields of the GraphQL type RateLimit.
// The GraphQL type's documentation follows.
//
// Represents the client's rate limit.
type GetTeamsRateLimit struct {
	// The maximum number of points the client is permitted to consume in a 60 minute window.
	Limit int `json:"limit"`
	// The point cost for the current query counting against the rate limit.
	Cost int `json:"cost"`
	// The number of points remaining in the current rate limit window.
	Remaining int `json:"remaining"`
	// The time at which the current rate limit window resets in UTC epoch seconds.
	ResetAt time.Time `json:"resetAt"`
}

// GetLimit returns GetTeamsRateLimit.Limit, and is useful for accessing the field via an interface.
func (v *GetTeamsRateLimit) GetLimit() int { return v.Limit }

// GetCost returns GetTeamsRateLimit.Cost, and is useful for accessing the field via an interface.
func (v *GetTeamsRateLimit) GetCost() int { return v.Cost }

// GetRemaining returns GetTeamsRateLimit.Remaining, and is useful for accessing the field via an interface.
func (v *GetTeamsRateLimit) GetRemaining() int { return v.Remaining }

// GetResetAt returns GetTeamsRateLimit.ResetAt, and is useful for accessing the field via an interface.
func (v *GetTeamsRateLimit) GetResetAt() time.Time { return v.ResetAt }

// GetTeamsResponse is returned by GetTeams on success.
type GetTeamsResponse struct {
	// Lookup a organization by login.
	Organization GetTeamsOrganization `json:"organization"`
	// The currently authenticated user.
	Viewer GetTeamsViewerUser `json:"viewer"`
	// The client's rate limit information.
	RateLimit GetTeamsRateLimit `json:"rateLimit"`
}

// GetOrganization returns GetTeamsResponse.Organization, and is useful for accessing the field via an interface.
func (v *GetTeamsResponse) GetOrganization() GetTeamsOrganization { return v.Organization }

// GetViewer returns GetTeamsResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetTeamsResponse) GetViewer() GetTeamsViewerUser { return v.Viewer }

// GetRateLimit returns GetTeamsResponse.RateLimit, and is useful for accessing the field via an interface.
func (v *GetTeamsResponse) GetRateLimit() GetTeamsRateLimit { return v.RateLimit }

// GetTeamsViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type GetTeamsViewerUser struct {
	// The username used to login.
	Login string `json:"login"`
}

// GetLogin returns GetTeamsViewerUser.Login, and is useful for accessing the field via an interface.
func (v *GetTeamsViewerUser) GetLogin() string { return v.Login }

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

// Ways in which team connections can be ordered.
type TeamOrder struct {
	// The direction in which to order nodes.
	Direction OrderDirection `json:"direction"`
	// The field in which to order nodes by.
	Field TeamOrderField `json:"field"`
}

// GetDirection returns TeamOrder.Direction, and is useful for accessing the field via an interface.
func (v *TeamOrder) GetDirection() OrderDirection { return v.Direction }

// GetField returns TeamOrder.Field, and is useful for accessing the field via an interface.
func (v *TeamOrder) GetField() TeamOrderField { return v.Field }

// Properties by which team connections can be ordered.
type TeamOrderField string

const (
	// Allows ordering a list of teams by name.
	TeamOrderFieldName TeamOrderField = "NAME"
)

var AllTeamOrderField = []TeamOrderField{
	TeamOrderFieldName,
}

// Autogenerated input type of UpdateLabel
type UpdateLabelInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// A 6 character hex code, without the leading #, identifying the updated color of the label.
	Color string `json:"color"`
	// A brief description of the label, such as its purpose.
	Description string `json:"description"`
	// The Node ID of the label to be updated.
	Id string `json:"id"`
	// The updated name of the label.
	Name string `json:"name"`
}

// GetClientMutationId returns UpdateLabelInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetClientMutationId() string { return v.ClientMutationId }

// GetColor returns UpdateLabelInput.Color, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetColor() string { return v.Color }

// GetDescription returns UpdateLabelInput.Description, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetDescription() string { return v.Description }

// GetId returns UpdateLabelInput.Id, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetId() string { return v.Id }

// GetName returns UpdateLabelInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateLabelInput) GetName() string { return v.Name }

// UpdateLabelResponse is returned by UpdateLabel on success.
type UpdateLabelResponse struct {
	// Updates an existing label.
	UpdateLabel UpdateLabelUpdateLabelUpdateLabelPayload `json:"updateLabel"`
}

// GetUpdateLabel returns UpdateLabelResponse.UpdateLabel, and is useful for accessing the field via an interface.
func (v *UpdateLabelResponse) GetUpdateLabel() UpdateLabelUpdateLabelUpdateLabelPayload {
	return v.UpdateLabel
}

// UpdateLabelUpdateLabelUpdateLabelPayload includes the requested fields of the GraphQL type UpdateLabelPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of UpdateLabel.
type UpdateLabelUpdateLabelUpdateLabelPayload struct {
	// The updated label.
	Label UpdateLabelUpdateLabelUpdateLabelPayloadLabel `json:"label"`
}

// GetLabel returns UpdateLabelUpdateLabelUpdateLabelPayload.Label, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayload) GetLabel() UpdateLabelUpdateLabelUpdateLabelPayloadLabel {
	return v.Label
}

// UpdateLabelUpdateLabelUpdateLabelPayloadLabel includes the requested fields of the GraphQL type Label.
// The GraphQL type's documentation follows.
//
// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
type UpdateLabelUpdateLabelUpdateLabelPayloadLabel struct {
	// Identifies the label name.
	Name string `json:"name"`
	// Identifies the date and time when the label was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the label color.
	Color string `json:"color"`
	// A brief description of this label.
	Description string `json:"description"`
	// Indicates whether or not this is a default label.
	IsDefault bool `json:"isDefault"`
	// Identifies the date and time when the label was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The HTTP URL for this label.
	Url url.URL `json:"url"`
}

// GetName returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.Name, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetName() string { return v.Name }

// GetCreatedAt returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.CreatedAt, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetCreatedAt() time.Time { return v.CreatedAt }

// GetColor returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.Color, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetColor() string { return v.Color }

// GetDescription returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.Description, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetDescription() string { return v.Description }

// GetIsDefault returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.IsDefault, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetIsDefault() bool { return v.IsDefault }

// GetUpdatedAt returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns UpdateLabelUpdateLabelUpdateLabelPayloadLabel.Url, and is useful for accessing the field via an interface.
func (v *UpdateLabelUpdateLabelUpdateLabelPayloadLabel) GetUrl() url.URL { return v.Url }

// __CreateLabelInput is used internally by genqlient
type __CreateLabelInput struct {
	Input CreateLabelInput `json:"input"`
}

// GetInput returns __CreateLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateLabelInput) GetInput() CreateLabelInput { return v.Input }

// __DeleteLabelInput is used internally by genqlient
type __DeleteLabelInput struct {
	Input DeleteLabelInput `json:"input"`
}

// GetInput returns __DeleteLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__DeleteLabelInput) GetInput() DeleteLabelInput { return v.Input }

// __GetRepositoryIssueLabelsInput is used internally by genqlient
type __GetRepositoryIssueLabelsInput struct {
	Name   string `json:"name"`
	Owner  string `json:"owner"`
	Cursor string `json:"cursor,omitempty"`
}

// GetName returns __GetRepositoryIssueLabelsInput.Name, and is useful for accessing the field via an interface.
func (v *__GetRepositoryIssueLabelsInput) GetName() string { return v.Name }

// GetOwner returns __GetRepositoryIssueLabelsInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetRepositoryIssueLabelsInput) GetOwner() string { return v.Owner }

// GetCursor returns __GetRepositoryIssueLabelsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetRepositoryIssueLabelsInput) GetCursor() string { return v.Cursor }

// __GetTeamsInput is used internally by genqlient
type __GetTeamsInput struct {
	Order        TeamOrder `json:"order"`
	First        int       `json:"first"`
	Cursor       string    `json:"cursor,omitempty"`
	Organization string    `json:"organization"`
}

// GetOrder returns __GetTeamsInput.Order, and is useful for accessing the field via an interface.
func (v *__GetTeamsInput) GetOrder() TeamOrder { return v.Order }

// GetFirst returns __GetTeamsInput.First, and is useful for accessing the field via an interface.
func (v *__GetTeamsInput) GetFirst() int { return v.First }

// GetCursor returns __GetTeamsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetTeamsInput) GetCursor() string { return v.Cursor }

// GetOrganization returns __GetTeamsInput.Organization, and is useful for accessing the field via an interface.
func (v *__GetTeamsInput) GetOrganization() string { return v.Organization }

// __UpdateLabelInput is used internally by genqlient
type __UpdateLabelInput struct {
	Input UpdateLabelInput `json:"input"`
}

// GetInput returns __UpdateLabelInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateLabelInput) GetInput() UpdateLabelInput { return v.Input }

// The mutation executed by CreateLabel.
const CreateLabel_Operation = `
mutation CreateLabel ($input: CreateLabelInput!) {
	createLabel(input: $input) {
		label {
			name
			createdAt
			color
			description
			isDefault
			updatedAt
			url
		}
	}
}
`

func CreateLabel(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateLabelInput,
) (data_ *CreateLabelResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateLabel",
		Query:  CreateLabel_Operation,
		Variables: &__CreateLabelInput{
			Input: input,
		},
	}

	data_ = &CreateLabelResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by DeleteLabel.
const DeleteLabel_Operation = `
mutation DeleteLabel ($input: DeleteLabelInput!) {
	deleteLabel(input: $input) {
		clientMutationId
	}
}
`

func DeleteLabel(
	ctx_ context.Context,
	client_ graphql.Client,
	input DeleteLabelInput,
) (data_ *DeleteLabelResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DeleteLabel",
		Query:  DeleteLabel_Operation,
		Variables: &__DeleteLabelInput{
			Input: input,
		},
	}

	data_ = &DeleteLabelResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetRateLimit.
const GetRateLimit_Operation = `
query GetRateLimit {
	viewer {
		login
	}
	rateLimit {
		limit
		cost
		remaining
		resetAt
	}
}
`

func GetRateLimit(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetRateLimitResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetRateLimit",
		Query:  GetRateLimit_Operation,
	}

	data_ = &GetRateLimitResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetRepositoryIssueLabels.
const GetRepositoryIssueLabels_Operation = `
query GetRepositoryIssueLabels ($name: String = "", $owner: String!, $cursor: String) {
	repository(name: $name, owner: $owner) {
		id
		labels(first: 100, after: $cursor) {
			edges {
				node {
					name
					createdAt
					color
					description
					isDefault
					updatedAt
					url
					id
				}
			}
			pageInfo {
				endCursor
				startCursor
				hasNextPage
			}
		}
	}
}
`

func GetRepositoryIssueLabels(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	owner string,
	cursor string,
) (data_ *GetRepositoryIssueLabelsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetRepositoryIssueLabels",
		Query:  GetRepositoryIssueLabels_Operation,
		Variables: &__GetRepositoryIssueLabelsInput{
			Name:   name,
			Owner:  owner,
			Cursor: cursor,
		},
	}

	data_ = &GetRepositoryIssueLabelsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTeams.
const GetTeams_Operation = `
query GetTeams ($order: TeamOrder!, $first: Int, $cursor: String, $organization: String!) {
	organization(login: $organization) {
		teams(orderBy: $order, first: $first, after: $cursor) {
			pageInfo {
				hasNextPage
				startCursor
				endCursor
			}
			edges {
				node {
					name
					members {
						edges {
							node {
								id
							}
						}
					}
					childTeams(first: 100) {
						edges {
							node {
								id
							}
						}
					}
					description
				}
			}
		}
	}
	viewer {
		login
	}
	rateLimit {
		limit
		cost
		remaining
		resetAt
	}
}
`

func GetTeams(
	ctx_ context.Context,
	client_ graphql.Client,
	order TeamOrder,
	first int,
	cursor string,
	organization string,
) (data_ *GetTeamsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTeams",
		Query:  GetTeams_Operation,
		Variables: &__GetTeamsInput{
			Order:        order,
			First:        first,
			Cursor:       cursor,
			Organization: organization,
		},
	}

	data_ = &GetTeamsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateLabel.
const UpdateLabel_Operation = `
mutation UpdateLabel ($input: UpdateLabelInput!) {
	updateLabel(input: $input) {
		label {
			name
			createdAt
			color
			description
			isDefault
			updatedAt
			url
		}
	}
}
`

func UpdateLabel(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateLabelInput,
) (data_ *UpdateLabelResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateLabel",
		Query:  UpdateLabel_Operation,
		Variables: &__UpdateLabelInput{
			Input: input,
		},
	}

	data_ = &UpdateLabelResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
