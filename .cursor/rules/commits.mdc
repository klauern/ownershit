---
alwaysApply: true
description: "Commit message format and Git workflow"
---

# Commit Guidelines

## Commit Message Format

Use [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) style:

```
<type>(<scope>): <subject>

[optional body]

[optional footer]
```

## Types

- `feat` - New feature
- `fix` - Bug fix
- `docs` - Documentation changes
- `style` - Code style changes (formatting, etc.)
- `refactor` - Code refactoring
- `test` - Adding or updating tests
- `chore` - Maintenance tasks
- `ci` - CI/CD changes
- `perf` - Performance improvements

## Scopes (examples)

- `csv` - CSV import functionality
- `ci` - CI/CD pipeline
- `api` - API integration
- `config` - Configuration handling
- `cli` - CLI commands
- `v3` - REST API v3
- `v4` - GraphQL API v4
- `branch` - Branch protection
- `archive` - Repository archiving

## Examples

### Good Commits

```
feat(csv): add support for importing team permissions

fix(v4api): return error instead of panic in NewGHv4Client

docs: update README with installation instructions

test(branch): add integration tests for branch protection

refactor(config): improve nil safety in MapPermissions
```

### Commit Body

```
feat(cli): add validate command for configuration files

Implements configuration validation and migration support.
Validates YAML syntax, team permissions, and branch rules.

Closes task-28
```

## Breaking Changes

```
feat(api)!: migrate from v3 to v4 for repository operations

BREAKING CHANGE: Configuration format has changed.
See MIGRATION.md for upgrade instructions.
```

## Git Workflow

### Never Do

❌ `git commit --no-verify` (skip hooks)
❌ `git push --force` to main/master
❌ `git reset --hard` on shared branches
❌ Update git config automatically

### Before Committing

✅ `task fmt` - Format code
✅ `task lint` - Check for issues
✅ `task test` - Run tests
✅ Review changes with `git diff`
✅ Stage related changes together

### Commit Strategy

- **Atomic commits**: One logical change per commit
- **Group related work**: Keep related changes together
- **Imperative mood**: "Add feature" not "Added feature"
- **Reference tasks**: Include task IDs when relevant

### When Tests Pass

When tests pass, commit changes before making more changes. This creates clean, verifiable history.

## Pull Request Guidelines

- Summarize behavior changes in PR description
- List validation steps (e.g., task test output)
- Link Backlog.md task IDs
- Attach screenshots for UI/docs changes
- Callout breaking changes for release notes
- Ensure CI passes before requesting review
