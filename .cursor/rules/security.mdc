---
description: "Security practices and sensitive data handling"
alwaysApply: true
---

# Security Guidelines

## Environment Variables

### Required
```bash
export GITHUB_TOKEN="ghp_..."  # Personal Access Token
# Required scopes: repo, admin:org
```

### Optional
```bash
export OWNERSHIT_DEBUG=1  # Enable debug logging
```

## Token Security

- ❌ **Never** commit tokens to repository
- ❌ **Never** log token values (even partially)
- ❌ **Never** include tokens in error messages
- ✅ Use `.env` files (gitignored) for local development
- ✅ Check token validity before operations
- ✅ Handle expired token errors gracefully
- ✅ Use minimum required scopes

## Sensitive Data in Logs

### ✅ Correct: Debug-Only HTTP Logging
```go
if log.Debug().Enabled() {
    dumpedResp, _ := httputil.DumpResponse(resp.Response, false)
    if len(dumpedResp) > 0 {
        log.Debug().Str("response-body", string(dumpedResp)).Msg("response body")
    }
}
```

### ❌ Wrong: Always Logging Sensitive Data
```go
// BAD - Logs sensitive data in production
log.Info().Str("response", string(body)).Msg("got response")
```

## Configuration Security

- ❌ Never commit organization-specific configs
- ❌ Never commit production repository configurations
- ✅ Store production configs **outside** repository
- ✅ Use [example-repositories.yaml](mdc:example-repositories.yaml) for documentation
- ✅ Parameterize tests with fixtures in [testdata/](mdc:testdata/)

## Nil Safety & Error Handling

### Guard Against Nil Responses
```go
// ✅ Check before dereferencing
if resp != nil && resp.Response != nil {
    // Safe to use resp.Response
}

// ❌ Potential nil pointer dereference
log.Debug().Str("status", resp.Response.Status).Msg("response")  // DANGER!
```

### Proper Error Wrapping
```go
// ✅ Wrap errors with context, hide internal details from users
if err != nil {
    log.Err(err).Str("org", org).Msg("internal: API call failed")
    return fmt.Errorf("unable to sync topics: check your GITHUB_TOKEN and permissions")
}

// ❌ Exposing internal errors to users
return fmt.Errorf("failed: %v", internalErr)  // May leak sensitive info
```

## Input Validation

```go
// Validate organization name
if settings.Organization == nil || *settings.Organization == "" {
    return errors.New("organization is required")
}

// Validate team permission levels
validPermissions := map[string]bool{
    "admin": true, "push": true, "pull": true,
    "triage": true, "maintain": true,
}
if !validPermissions[permission] {
    return fmt.Errorf("invalid permission: %s", permission)
}

// Sanitize repository names
if strings.Contains(repo, "..") {
    return errors.New("invalid repository name")
}
```

## Security Scanning

```bash
task security      # Run govulncheck for vulnerability scanning
task test-all      # Tests + security checks before release
```

**Before every release:**
```bash
task test-all      # Must pass
```

## API Security

### Rate Limiting
```bash
ownershit ratelimit  # Check API rate limits
```

- Implement backoff for bulk operations
- GraphQL and REST have different limits
- Monitor remaining requests

### Token Scopes
Minimum required scopes:
- `repo` - Repository management
- `admin:org` - Organization and team management

Don't request broader scopes than needed.

## Pre-Release Security Checklist

- [ ] Run `task security` (govulncheck) ✅
- [ ] Review dependency updates
- [ ] Check for hardcoded credentials in code
- [ ] Verify sensitive data logging is debug-only
- [ ] Confirm token scopes are minimal
- [ ] Test with invalid/expired tokens
- [ ] Review error messages for information leakage
- [ ] Ensure production configs not committed
- [ ] Check .gitignore includes sensitive files

## Common Security Pitfalls

❌ Logging HTTP bodies in production (use debug mode only)
❌ Not checking for nil responses before dereferencing
❌ Exposing internal errors to users
❌ Hardcoding tokens or credentials
❌ Committing production configurations
❌ Using overly broad token scopes
❌ Not validating user input
❌ Panicking and exposing stack traces to users

## Reporting Security Issues

- **Do not** open public issues for security vulnerabilities
- Contact maintainers privately
- Provide detailed reproduction steps
- Allow time for fixes before disclosure
