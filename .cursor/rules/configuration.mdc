---
description: "Configuration file format and validation"
globs: "*.yaml,config*.go"
---

# Configuration Management

## Configuration Files

- **Primary:** `repositories.yaml` (YAML format)
- **Example:** [example-repositories.yaml](mdc:example-repositories.yaml)
- **Parser:** [config.go](mdc:config.go)
- **Library:** `gopkg.in/yaml.v3`

## Structure

### Organization (Required)
```yaml
organization: "org-name"
```

### Default Topics/Labels
```yaml
default_topics:
  - "guardians"
  - "golang"

default_labels:
  - name: "bug"
    color: "d73a4a"
    description: "Something isn't working"
```

### Team Permissions
```yaml
teams:
  - name: "platform"
    permission: "admin"  # admin | push | pull | triage | maintain
```

### Repositories
```yaml
repositories:
  - name: "my-repo"
    description: "Repository description"
    private: true
    wiki: false
    issues: true
    projects: false
    topics:  # Reserved for future per-repo customization
      - "custom-topic"
    teams:
      - name: "platform"
        permission: "admin"
```

### Branch Protection
```yaml
    branch_protections:
      - pattern: "main"
        required_reviews: 2
        dismiss_stale_reviews: true
        require_code_owner_reviews: true
        required_status_checks:
          - "ci/test"
          - "ci/lint"
        enforce_admins: true
        allow_force_pushes: false
        allow_deletions: false
```

### Merge Strategies
```yaml
    allow_merge_commit: true
    allow_squash_merge: true
    allow_rebase_merge: false
```

## Configuration Orchestration

Configuration structures in [config.go](mdc:config.go) include orchestration functions:

```go
// Orchestrate topic synchronization
func SyncTopics(settings *PermissionsSettings, client *GitHubClient, additive bool) {
    for _, repo := range settings.Repositories {
        // Apply default_topics to each repository
        client.SyncTopics(*settings.Organization, *repo.Name, settings.DefaultTopics, additive)
    }
}
```

## Field Usage

### DefaultTopics vs Repository.Topics
- **`DefaultTopics`** (PermissionsSettings): Used by `topics` command to apply topics across all repos
- **`Repository.Topics`**: Reserved for future per-repository topic customization (not currently used)

## Validation

- Type safety via Go structs
- Required field validation
- Team permission level validation
- Future: `validate` command for pre-flight checks (task-28)

## Commands Using Configuration

```bash
ownershit init        # Create stub config
ownershit sync        # Sync all repository settings
ownershit branches    # Sync branch merge strategies only
ownershit label       # Sync default labels only
ownershit topics      # Sync default topics only
ownershit import      # Import existing repository settings
```

## Import Operations

```bash
ownershit import --org myorg --repo myrepo
```

Implementation: [import.go](mdc:import.go)
Supports: Team permissions, branch protection, repository settings

## Security Best Practices

- ✅ Store production configs **outside** the repository
- ✅ Use [example-repositories.yaml](mdc:example-repositories.yaml) for documentation
- ✅ Parameterize tests with fixtures in [testdata/](mdc:testdata/)
- ❌ Never commit organization-specific configs with real data

## Testing

- **Test fixtures:** [testdata/testrepoconfig.yaml](mdc:testdata/testrepoconfig.yaml)
- **Parsing tests:** [config_parsing_test.go](mdc:config_parsing_test.go)
- **Permission tests:** [config_permissions_test.go](mdc:config_permissions_test.go)
